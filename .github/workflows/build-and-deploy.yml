name: Build and Deploy

on:
  push:
    branches: [main]
    paths:
      - "frontend/**"
      - "backend/**"
      - "docker-compose.yml"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: 2025summer-foosball-frontend
  BACKEND_IMAGE: 2025summer-foosball-backend

jobs:
  # Determine what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend == 'true' ||github.event_name == 'workflow_dispatch' }}
      backend: ${{ steps.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch' }}
      compose: ${{ steps.changes.outputs.compose == 'true' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: main
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            compose:
              - 'docker-compose.yml'
        if: github.event_name != 'workflow_dispatch'

  # Build frontend if changed
  build-frontend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    permissions:
      contents: read
      issues: write
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Sanitize image tag
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE }}
          tags: latest
      - name: Build and push image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.output.tags }}

      # - name: Build image
      #   run: docker build . --file Dockerfile --tag $FRONTEND_IMAGE
      # - name: Log into GitHub Container Registry
      #   run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      # - name: Push image to Github Container Registry
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$FRONTEND_IMAGE
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "main" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION
      #     docker tag $FRONTEND_IMAGE $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION

  # Build backend if changed
  build-backend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    permissions:
      contents: read
      issues: write
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Sanitize image tag
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}
          tags: latest
      - name: Build and push image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.output.tags }}

  # Deploy only after all builds complete (or if only compose changed)
  deploy:
    runs-on: ubuntu-latest
    needs: [changes, build-frontend, build-backend]
    if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.compose == 'true')
    steps:
      - uses: actions/checkout@v4

      - name: Copy Compose File
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./docker-compose.yml"
          target: /opt/foosball/

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /opt/foosball
            docker compose pull
            docker compose up -d --remove-orphans
